- name: nginx setup
  block:
  - name: nginx install
    apt:
      pkg: nginx
  - name: nginx config setup
    template:
      src: "nginx.conf.j2"
      dest: /etc/nginx/nginx.conf
  - systemd: 
      name: nginx
      enabled: yes
      state: restarted


- name: setup systemd config etcd
  block:
  - name: Copy kubelet.conf
    copy:
      src: "{{ lookup('fileglob', 'kubelet.conf') }}"
      dest: "/etc/systemd/system/kubelet.service.d/kubelet.conf"
  - name: Copy 20-etcd-service-manager.conf
    copy:
      src: "{{ lookup('fileglob', '20-etcd-service-manager.conf') }}"
      dest: "/etc/systemd/system/kubelet.service.d/20-etcd-service-manager.conf"
  - systemd:
      name: kubelet
      state: restarted
      daemon_reload: true
    register: kubelet_status
  - debug: msg="{{kubelet_status}}"
    when: debug is defined
  when: etcd is defined

- name: generate config
  block:
  - name: generate ca
    shell: "kubeadm init phase certs etcd-ca"
  - fetch: src="/etc/kubernetes/pki/etcd/{{item}}" dest=buffer/ flat=yes
    with_items: ["ca.crt","ca.key"]
  delegate_to: "{{groups.master.0}}"
  run_once: true
  when: etcd is defined

- name: generate config
  block:
  - template: src=kubeconfig.yaml.j2  dest=/tmp/kubeconfig.yaml
  - file: state=directory dest=/etc/kubernetes/pki/etcd
  - copy: src=buffer/ dest=/etc/kubernetes/pki/etcd/
  - shell: "kubeadm init phase certs {{item}} --config=/tmp/kubeconfig.yaml"
    with_items: 
    - etcd-server
    - etcd-peer 
    - etcd-healthcheck-client
    - apiserver-etcd-client
  - shell: "kubeadm init phase etcd local --config=/tmp/kubeconfig.yaml"
  - file: state=absent dest=/etc/kubernetes/pki/etcd/ca.key
    when: inventory_hostname != groups.master.0
  when: etcd is defined

- name: kubeadm init
  block:
  -  name: kubeadm init is performed on {{groups.master.0}}
  -  shell: "kubeadm init 
            --upload-certs 
            --token {{token}} 
            --certificate-key {{certificate_key}} 
            --pod-network-cidr {{pod_cidr}} 
            --control-plane-endpoint {{master_endpoint}}
            --skip-phases=addon/kube-proxy"
     run_once: true
     delegate_to: "{{groups.master.0}}"
     register: kubeadm_output
  - name: waiting master
    uri: 
      url: "https://{{master_endpoint}}"
      ca_path: /etc/kubernetes/pki/ca.crt
      client_cert: /etc/kubernetes/pki/apiserver-kubelet-client.crt
      client_key:  /etc/kubernetes/pki/apiserver-kubelet-client.key
    register: _result
    until: _result.status == 200
    retries: 10
    delay: 10
  - debug: msg="{{kubeadm_output}}"
    when: debug is defined
  when: inventory_hostname == groups.master.0 and init is defined



- name: join master node
  block:
  - shell: "kubeadm join {{master_endpoint}} --token {{token}} --certificate-key {{certificate_key}} --discovery-token-unsafe-skip-ca-verification --control-plane"
    register: kubeadm_master_node
  - debug: msg="{{kubeadm_master_node}}"
    when: debug is defined
  when: inventory_hostname != groups.master.0 and join is defined

# - name: Install cilium
#   block:
#   - uri:
#       url: "https://raw.githubusercontent.com/cilium/cilium-cli/master/stable.txt"
#       return_content: yes
#     register: cilium_version
#   - unarchive:
#      src: "https://github.com/cilium/cilium-cli/releases/download/{{cilium_version.content|trim}}/cilium-linux-amd64.tar.gz"
#      dest: /usr/local/bin
#      remote_src: yes
#   - shell: "KUBECONFIG=/etc/kubernetes/admin.conf cilium install"
#     register: cilium_output
#   - debug: msg="{{cilium_output}}"
#     when: debug is defined
#   delegate_to: "{{groups.master.0}}"
#   run_once: true
#   when: cilium is defined

- name: Install cilium
  block:
  - name: helm cilium repo added
    shell: "helm repo add cilium https://helm.cilium.io/ && helm repo update"
  - name: install cilium helm
    shell: "KUBECONFIG=/etc/kubernetes/admin.conf
            helm install cilium cilium/cilium \
            --namespace kube-system \
            --set kubeProxyReplacement=strict \
            --set k8sServiceHost={{master_hostname}} \
            --set k8sServicePort={{nginx_master_port}}"
  - debug: msg="{{cilium_output}}"
    when: debug is defined
  delegate_to: "{{groups.master.0}}"
  run_once: true
  when: cilium is defined
