- name: nginx setup
  block:
  - name: nginx install
    apt:
      pkg: nginx
  - name: nginx config setup
    template:
      src: "nginx.conf.j2"
      dest: /etc/nginx/nginx.conf
  - systemd: 
      name: nginx
      enabled: yes
      state: restarted


- name: setup systemd config etcd
  block:
  - name: Copy kubelet.conf
    copy:
      src: "{{ lookup('fileglob', 'kubelet.conf') }}"
      dest: "/etc/systemd/system/kubelet.service.d/kubelet.conf"
  - name: Copy 20-etcd-service-manager.conf
    copy:
      src: "{{ lookup('fileglob', '20-etcd-service-manager.conf') }}"
      dest: "/etc/systemd/system/kubelet.service.d/20-etcd-service-manager.conf"
  - systemd:
      name: kubelet
      state: restarted
      daemon_reload: true
    register: kubelet_status
  - debug: msg="{{kubelet_status}}"
    when: debug is defined
  when: etcd is defined

- name: generate config
  block:
  - name: generate ca
    shell: "kubeadm init phase certs etcd-ca"
  - fetch: src="/etc/kubernetes/pki/etcd/{{item}}" dest=buffer/ flat=yes
    with_items: ["ca.crt","ca.key"]
  delegate_to: "{{groups.master.0}}"
  run_once: true
  when: etcd is defined

- name: generate config
  block:
  - template: src=kubeconfig.yaml.j2  dest=/tmp/kubeconfig.yaml
  - file: state=directory dest=/etc/kubernetes/pki/etcd
  - copy: src=buffer/ dest=/etc/kubernetes/pki/etcd/
  - shell: "kubeadm init phase certs {{item}} --config=/tmp/kubeconfig.yaml"
    with_items: 
    - etcd-server
    - etcd-peer 
    - etcd-healthcheck-client
    - apiserver-etcd-client
  - shell: "kubeadm init phase etcd local --config=/tmp/kubeconfig.yaml"
  - file: state=absent dest=/etc/kubernetes/pki/etcd/ca.key
    when: inventory_hostname != groups.master.0
  when: etcd is defined

- name: kubeadm init
  block:
  - name: "kubeadm init is performed on {{groups.master.0}}"
    shell: "kubeadm init 
            --upload-certs 
            --token {{token}} 
            --certificate-key {{certificate_key}} 
            --pod-network-cidr {{pod_cidr}} 
            --control-plane-endpoint {{master_endpoint}}
            --skip-phases=addon/kube-proxy"
    run_once: true
    delegate_to: "{{groups.master.0}}"
    register: kubeadm_output
  - debug: msg="{{kubeadm_output}}"
    when: debug is defined
  - name: waiting master
    uri: 
      url: "https://{{master_endpoint}}"
      ca_path: /etc/kubernetes/pki/ca.crt
      client_cert: /etc/kubernetes/pki/apiserver-kubelet-client.crt
      client_key:  /etc/kubernetes/pki/apiserver-kubelet-client.key
    register: _result
    # until: _result.status == 200
    # retries: 10
    # delay: 10
  - debug: msg="{{_result}}"
    when: debug is defined
  when: inventory_hostname == groups.master.0 and init is defined



- name: join master node
  block:
  - shell: "kubeadm join {{master_endpoint}} --token {{token}} --certificate-key {{certificate_key}} --discovery-token-unsafe-skip-ca-verification --control-plane"
    register: kubeadm_master_node
  - debug: msg="{{kubeadm_master_node}}"
    when: debug is defined
  when: inventory_hostname != groups.master.0 and join is defined


- block:
  - name: Add all helm repo
    shell: "helm repo add {{ item.key }} {{ item.value }}"
    with_dict:
      nfs-subdir-external-provisioner: "https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/"
      cilium: "https://helm.cilium.io/"
  - name: perform helm repo update
    shell:  "helm repo update"
    register: helm_repo_update
  - debug: msg="{{helm_repo_update}}"
    when: debug is defined

- name: Install env.
  block:
  ##cilium instll
  - name: install cilium helm
    shell: "KUBECONFIG=/etc/kubernetes/admin.conf
            helm install cilium cilium/cilium \
            --namespace kube-system \
            --set kubeProxyReplacement=strict \
            --set k8sServiceHost={{master_hostname}} \
            --set k8sServicePort={{nginx_master_port}}"
    register: cilium_output
    when: cilium is defined
  - debug: msg="{{cilium_output}}"
    when: debug is defined
  ## nfs-provisioner install
  - name: Install nfs-subdir-external-provisioner
    shell: "KUBECONFIG=/etc/kubernetes/admin.conf \
             helm install nfs-subdir-external-provisioner nfs-subdir-external-provisioner/nfs-subdir-external-provisioner \
            --set nfs.server={{nfs.server}} \
            --set nfs.path={{nfs.path}} \
            --namespace kube-system"
    register: nfs_provisioner_output
    when: nfs_provisioner is defined
  - debug: msg="{{nfs_provisioner_output}}"
    when: debug is defined  
  delegate_to: "{{groups.master.0}}"
  run_once: true

- name: Implement manifests
  block:
  - include_tasks: implement_manifest.yaml
    loop: 
    - kube-system
    - tools
    loop_control:
      loop_var: ns
  delegate_to: "{{groups.master.0}}"
  run_once: true
